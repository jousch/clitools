<?php

namespace CliTools\Console\Command\User;

/*
 * CliTools Command
 * Copyright (C) 2016 WebDevOps.io
 * Copyright (C) 2015 Markus Blaschke <markus@familie-blaschke.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class RebuildSshConfigCommand extends \CliTools\Console\Command\AbstractCommand
{

    /**
     * Configure command
     */
    protected function configure()
    {
        $this->setName('user:rebuildsshconfig')
             ->setDescription('Rebuild SSH Config for current user');
    }

    /**
     * Execute command
     *
     * @param  InputInterface  $input  Input instance
     * @param  OutputInterface $output Output instance
     *
     * @return int|null|void
     */
    public function execute(InputInterface $input, OutputInterface $output)
    {
        $userHome = getenv('HOME');
        $userName = getenv('USER');

        $output->writeln('<h2>Rebuilding ~/.ssh/config ...</h2>');

        $targetConfFile = $userHome . '/.ssh/config';
        $userConfFile   = $userHome . '/.ssh/config.user';
        $reposDirectory = $this->getApplication()
                               ->getConfigValue('config', 'ssh_conf_path', '/opt/conf/ssh');

        $defaultFile     = $reposDirectory . '/default.conf';
        $defaultUserFile = $userHome . '/.ssh/config.default';

        $confContent   = array();
        $confContent[] = '###############################################################################';
        $confContent[] = '## DO NOT EDIT this file, this file will be overwritten by clitools';
        $confContent[] = '## if you need additional entries edit ~/.ssh/config.user';
        $confContent[] = '## This file will automatically rewritten after edit of config.user';
        $confContent[] = '###############################################################################';
        $confContent[] = '';
        $confContent[] = '## generated on ' . date('r') . ' by clitools';
        $confContent[] = '';

        #####################
        # Default config
        #####################
        $confContent[] = '###############################################################################';
        $confContent[] = '# DEFAULT';
        $confContent[] = '###############################################################################';
        $confContent[] = '';

        if (file_exists($defaultUserFile)) {
            // User default
            $confContent[] = '# from: ' . $defaultUserFile;
            $confContent[] = file_get_contents($defaultUserFile);

            $output->writeln('<p>Using user defaults from ' . $defaultUserFile . '</p>');
        } elseif (file_exists($defaultFile)) {
            // System default
            $confContent[] = '# from: ' . $defaultFile;
            $confContent[] = file_get_contents($defaultFile);

            $output->writeln('<p>Using system defaults from ' . $defaultFile . '</p>');
        } else {
            // No default found, provide at least good defaults
            $confContent[] = '# from: no config';
            $confContent[] = 'Host *';
            $confContent[] = '    Compression             yes';
            $confContent[] = '    CompressionLevel        6';
            $confContent[] = '    TCPKeepAlive            yes';
            $confContent[] = '    KeepAlive               yes';
            $confContent[] = '    ServerAliveInterval     60';
            $confContent[] = '    ForwardAgent            no';

            $output->writeln('<p>No defaults found, setting internal defaults</p>');
        }
        $confContent[] = '';

        #####################
        # System config
        #####################
        if (is_dir($reposDirectory)) {
            $dirIterator = new \DirectoryIterator($reposDirectory);
            foreach ($dirIterator as $dirEntry) {
                /** @var \DirectoryIterator $dirEntry */

                // skip dot
                if ($dirEntry->isDot()) {
                    continue;
                }

                // skip default
                if ($dirEntry->getPathname() === $defaultFile) {
                    continue;
                }

                // Check filename
                if (!preg_match('/\.conf$/i', $dirEntry->getFilename())) {
                    continue;
                }

                $filePath = $dirEntry->getPathname();

                $confContent[] = '###############################################################################';
                $confContent[] = '# ' . $filePath;
                $confContent[] = '###############################################################################';
                $confContent[] = '';
                $confContent[] = file_get_contents($filePath);
                $confContent[] = '';

                $output->writeln('<p>Using ' . $filePath . '</p>');
            }
        }

        #####################
        # User config
        #####################
        $confContent[] = '###############################################################################';
        $confContent[] = '# ~/.ssh/config.user';
        $confContent[] = '###############################################################################';
        $confContent[] = '';

        if (file_exists($userConfFile)) {
            $confContent[] = file_get_contents($userConfFile);

            $output->writeln('<p>Using ' . $userConfFile . '</p>');
        }
        $confContent[] = '';

        #####################
        # Build config
        #####################

        // Build string
        $confContent = implode("\n", $confContent);

        // Inject env names
        $templateVarList               = array();
        $templateVarList['{USERNAME}'] = $userName;

        $confContent = strtr($confContent, $templateVarList);

        // Write file
        file_put_contents($targetConfFile, $confContent);

        $output->writeln('<h2>Finished rebuilding ssh configuration</h2>');

        return 0;
    }
}
